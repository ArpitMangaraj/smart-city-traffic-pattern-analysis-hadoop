/* MapReduce Program: Total Vehicle Count Per Junction (Modified for smart_city_traffic_data.csv) */

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class VehicleCountPerJunction {

  public static class TrafficMapper extends Mapper<Object, Text, Text, IntWritable> {
    private Text junction = new Text();
    private IntWritable count = new IntWritable();

    public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
      String[] parts = value.toString().split(",");
      if (parts.length == 5 && !parts[0].equals("timestamp")) { // Skip header
        String location = parts[1];
        try {
          int vehicleCount = Integer.parseInt(parts[3]);
          junction.set(location);
          count.set(vehicleCount);
          context.write(junction, count);
        } catch (NumberFormatException e) {
          // Skip malformed record
        }
      }
    }
  }

  public static class TrafficReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
    public void reduce(Text key, Iterable<IntWritable> values, Context context)
        throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      context.write(key, new IntWritable(sum));
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "Vehicle Count Per Junction");
    job.setJarByClass(VehicleCountPerJunction.class);
    job.setMapperClass(TrafficMapper.class);
    job.setCombinerClass(TrafficReducer.class);
    job.setReducerClass(TrafficReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
